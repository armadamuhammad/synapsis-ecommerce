basePath: /api/v1
definitions:
  lib.Page:
    properties:
      first:
        description: indicate first value
        example: true
        type: boolean
      items:
        type: object
      last:
        description: indicate last value
        example: false
        type: boolean
      max_page:
        description: maximum pages for current schema
        example: 9
        type: integer
      page:
        description: current page, start from zero
        example: 0
        type: integer
      size:
        description: size per page, default `10`
        example: 10
        type: integer
      total:
        description: total data without filters
        example: 100
        type: integer
      total_pages:
        description: total pages
        example: 10
        type: integer
      visible:
        description: current length
        example: 10
        type: integer
    type: object
  lib.Response:
    properties:
      message:
        description: response message
        type: string
      status:
        description: http status
        type: integer
    type: object
  model.Cart:
    properties:
      additional:
        type: string
      price:
        description: Price
        example: 10000
        type: number
      product:
        $ref: '#/definitions/model.Product'
      productid:
        description: ProductID
        format: uuid
        type: string
      quantity:
        description: Quantity
        example: 1
        type: integer
      userid:
        description: UserID
        format: uuid
        type: string
    type: object
  model.CartAPI:
    properties:
      price:
        description: Price
        example: 10000
        type: number
      productid:
        description: ProductID
        format: uuid
        type: string
      quantity:
        description: Quantity
        example: 1
        type: integer
      userid:
        description: UserID
        format: uuid
        type: string
    type: object
  model.Category:
    properties:
      additional:
        type: string
      code:
        description: Code
        example: food
        type: string
      name:
        description: Name
        example: Food
        type: string
    type: object
  model.CategoryAPI:
    properties:
      code:
        description: Code
        example: food
        type: string
      name:
        description: Name
        example: Food
        type: string
    type: object
  model.LoginAPI:
    properties:
      password:
        example: '@Password123'
        type: string
      remember:
        example: true
        type: boolean
      username:
        example: armadamuhammads@gmail.com
        type: string
    required:
    - password
    - username
    type: object
  model.LoginResponse:
    properties:
      token:
        $ref: '#/definitions/model.ResponseToken'
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.Product:
    properties:
      additional:
        type: string
      categoryid:
        description: CategoryID
        format: uuid
        type: string
      description:
        description: Description
        type: string
      name:
        description: Name
        example: Sepatu
        type: string
      price:
        description: Price
        example: 10000
        type: number
      sku:
        description: SKU
        example: PR-0000001
        type: string
    type: object
  model.ProductAPI:
    properties:
      categoryid:
        description: CategoryID
        format: uuid
        type: string
      description:
        description: Description
        type: string
      name:
        description: Name
        example: Sepatu
        type: string
      price:
        description: Price
        example: 10000
        type: number
      sku:
        description: SKU
        example: PR-0000001
        type: string
    type: object
  model.RegistrationAPI:
    properties:
      confirm_password:
        example: '@Password123'
        type: string
      email:
        example: armadamuhammads@gmail.com
        type: string
      first_name:
        example: Armada
        type: string
      last_name:
        example: Muhammad
        type: string
      password:
        example: '@Password123'
        minLength: 8
        type: string
      phone_number:
        example: "089678009400"
        type: string
    required:
    - confirm_password
    - email
    - first_name
    - password
    type: object
  model.ResponseToken:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      is_admin:
        type: boolean
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  model.User:
    properties:
      additional:
        type: string
      email:
        description: Email
        example: armadamuhammads@gmail.com
        type: string
      firstname:
        description: FirstName
        example: Armada
        type: string
      isadmin:
        description: IsAdmin
        type: boolean
      isverified:
        description: IsVerified
        type: boolean
      lastlogin:
        description: LastLogin
        format: date-time
        type: string
      lastname:
        description: LastName
        example: Muhammad Siswanto
        type: string
      password:
        description: Password
        type: string
      phonenumber:
        description: PhoneNumber
        example: "089678009400"
        type: string
      username:
        description: Username
        type: string
      verificationcode:
        description: VerificationCode
        example: "2024"
        type: string
    type: object
  model.UserAPI:
    properties:
      email:
        description: Email
        example: armadamuhammads@gmail.com
        type: string
      firstname:
        description: FirstName
        example: Armada
        type: string
      isadmin:
        description: IsAdmin
        type: boolean
      isverified:
        description: IsVerified
        type: boolean
      lastlogin:
        description: LastLogin
        format: date-time
        type: string
      lastname:
        description: LastName
        example: Muhammad Siswanto
        type: string
      password:
        description: Password
        type: string
      phonenumber:
        description: PhoneNumber
        example: "089678009400"
        type: string
      username:
        description: Username
        type: string
      verificationcode:
        description: VerificationCode
        example: "2024"
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: armadamuhammads@gmail.com
    name: Armada Muhammad Siswanto
  description: API Documentation
  title: Synapsis E-Commerce
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - application/json
      description: show basic response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show basic response
      tags:
      - API
  /accounts/login:
    post:
      consumes:
      - application/json
      description: Login into Account
      parameters:
      - description: Account data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.LoginAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Account data
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Login into Account
      tags:
      - Account
  /accounts/register:
    post:
      consumes:
      - application/json
      description: Register new Account
      parameters:
      - description: Account data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.RegistrationAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Register new Account
      tags:
      - Account
  /carts:
    get:
      consumes:
      - application/json
      description: List of Cart
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Cart
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Cart'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Create new Cart
      parameters:
      - description: Cart data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CartAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Cart data
          schema:
            $ref: '#/definitions/model.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Cart
      tags:
      - Cart
  /carts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Cart by id
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Cart by id
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: Get a Cart by id
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart data
          schema:
            $ref: '#/definitions/model.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Cart by id
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update Cart by id
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      - description: Cart data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CartAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Cart data
          schema:
            $ref: '#/definitions/model.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Cart by id
      tags:
      - Cart
  /categories:
    get:
      consumes:
      - application/json
      description: List of Category
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Category
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Category
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create new Category
      parameters:
      - description: Category data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CategoryAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Category data
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Category
      tags:
      - Category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Category by id
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get a Category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Category by id
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update Category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CategoryAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Category by id
      tags:
      - Category
  /info.json:
    get:
      consumes:
      - application/json
      description: show info response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show info response
      tags:
      - API
  /products:
    get:
      consumes:
      - application/json
      description: List of Product
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Product
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Product
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create new Product
      parameters:
      - description: Product data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ProductAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Product data
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Product
      tags:
      - Product
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Product by id
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get a Product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product data
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Product by id
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update Product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ProductAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Product data
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Product by id
      tags:
      - Product
  /users:
    get:
      consumes:
      - application/json
      description: List of User
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of User
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of User
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create new User
      parameters:
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.UserAPI'
      produces:
      - application/json
      responses:
        "201":
          description: User data
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new User
      tags:
      - User
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a User by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a User by id
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.UserAPI'
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User by id
      tags:
      - User
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  TokenKey:
    in: header
    name: x-Token
    type: apiKey
swagger: "2.0"
