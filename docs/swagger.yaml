basePath: /api/v1/transaction
definitions:
  lib.Page:
    properties:
      first:
        description: indicate first value
        example: true
        type: boolean
      items:
        type: object
      last:
        description: indicate last value
        example: false
        type: boolean
      max_page:
        description: maximum pages for current schema
        example: 9
        type: integer
      page:
        description: current page, start from zero
        example: 0
        type: integer
      size:
        description: size per page, default `10`
        example: 10
        type: integer
      total:
        description: total data without filters
        example: 100
        type: integer
      total_pages:
        description: total pages
        example: 10
        type: integer
      visible:
        description: current length
        example: 10
        type: integer
    type: object
  lib.Response:
    properties:
      message:
        description: response message
        type: string
      status:
        description: http status
        type: integer
    type: object
  model.PaymentTransaction:
    properties:
      additional:
        type: string
      amount:
        type: number
      approval_code:
        type: string
      approval_local_timestamp:
        format: date-time
        type: string
      approval_timestamp:
        format: date-time
        type: string
      comment:
        type: string
      currency_id:
        format: uuid
        type: string
      description:
        type: string
      partner_transaction_number:
        type: string
      partner_transaction_status:
        type: string
      payment_gateway_id:
        format: uuid
        type: string
      payment_type:
        enum:
        - cash
        - cashless
        type: string
      reference_number:
        format: uuid
        type: string
      transaction_id:
        type: string
      transaction_number:
        type: string
      transaction_status:
        enum:
        - paid
        - due
        - partial
        type: string
      transaction_timestamp:
        format: date-time
        type: string
      transaction_type:
        type: string
    required:
    - payment_type
    - transaction_status
    type: object
  model.PaymentTransactionAPI:
    properties:
      amount:
        type: number
      approval_code:
        type: string
      approval_local_timestamp:
        format: date-time
        type: string
      approval_timestamp:
        format: date-time
        type: string
      comment:
        type: string
      currency_id:
        format: uuid
        type: string
      description:
        type: string
      partner_transaction_number:
        type: string
      partner_transaction_status:
        type: string
      payment_gateway_id:
        format: uuid
        type: string
      payment_type:
        enum:
        - cash
        - cashless
        type: string
      reference_number:
        format: uuid
        type: string
      transaction_id:
        type: string
      transaction_number:
        type: string
      transaction_status:
        enum:
        - paid
        - due
        - partial
        type: string
      transaction_timestamp:
        format: date-time
        type: string
      transaction_type:
        type: string
    required:
    - payment_type
    - transaction_status
    type: object
  model.Transaction:
    properties:
      additional:
        type: string
      business_id:
        description: Business ID
        format: uuid
        type: string
      business_location_id:
        description: Business Location ID
        format: uuid
        type: string
      contact_id:
        description: Contact ID
        format: uuid
        type: string
      contact_mobile:
        example: "089123456789"
        type: string
      contact_name:
        example: alan
        type: string
      flow:
        description: Flow is filled by status transaction
        example: draft|ordered|cancel
        type: string
      invoice_no:
        description: Invoice No
        example: AS134412
        type: string
      is_recurring:
        type: boolean
      notes:
        type: string
      opening_stock_product_id:
        description: Opening Stock Product ID
        format: uuid
        type: string
      payment_status:
        description: Payment Status
        enum:
        - paid
        - due
        - partial
        example: paid
        type: string
      promo_amount:
        description: Tax Amount
        example: 10
        type: number
      promo_id:
        description: Promo ID
        format: uuid
        type: string
      promo_name:
        description: Promo Amount
        example: Weekend Special
        type: string
      promo_type:
        description: Promo Amount
        enum:
        - fixed
        - percentage
        example: percentage
        type: string
      purchase_order:
        items:
          $ref: '#/definitions/model.TransactionPurchaseLine'
        type: array
      recur_interval:
        type: integer
      recur_repeat_on:
        enum:
        - Day
        - Week
        - Month
        - Year
        example: Day
        type: string
      recur_repetition:
        type: integer
      recur_stopped_on:
        format: date-time
        type: string
      references_no:
        description: References No
        example: "11"
        type: string
      sell_line:
        items:
          $ref: '#/definitions/model.TransactionSellLine'
        type: array
      status_transaction:
        description: Status Transaction
        enum:
        - draft
        - waiting
        - paid
        - ordered
        - ready_to_shipping
        - shipping
        - arrived
        - received
        - done
        - pending
        - cancel
        - refuse
        - expired
        example: waiting
        type: string
      tax_amount:
        description: Tax Amount
        example: 10
        type: number
      tax_id:
        description: Tax ID
        format: uuid
        type: string
      tax_name:
        description: Tax Amount
        example: PPN 10%
        type: string
      total_pay:
        description: Total Price
        example: 50000
        type: number
      total_price:
        description: Total Price
        example: 50000
        type: number
      total_price_before:
        description: Total Price Before
        example: 1000
        type: number
      transaction_category_id:
        description: Business Location ID
        format: uuid
        type: string
      transaction_date:
        description: Transaction Date
        format: date-time
        type: string
      transaction_payment:
        items:
          $ref: '#/definitions/model.PaymentTransaction'
        type: array
      type:
        description: Type
        enum:
        - opening_stock
        - purchase
        - sell
        - income
        - expense
        - subscription
        example: sell
        type: string
    required:
    - payment_status
    - status_transaction
    - type
    type: object
  model.TransactionAPI:
    properties:
      business_id:
        description: Business ID
        format: uuid
        type: string
      business_location_id:
        description: Business Location ID
        format: uuid
        type: string
      contact_id:
        description: Contact ID
        format: uuid
        type: string
      contact_mobile:
        example: "089123456789"
        type: string
      contact_name:
        example: alan
        type: string
      flow:
        description: Flow is filled by status transaction
        example: draft|ordered|cancel
        type: string
      invoice_no:
        description: Invoice No
        example: AS134412
        type: string
      is_recurring:
        type: boolean
      notes:
        type: string
      opening_stock_product_id:
        description: Opening Stock Product ID
        format: uuid
        type: string
      payment_status:
        description: Payment Status
        enum:
        - paid
        - due
        - partial
        example: paid
        type: string
      promo_amount:
        description: Tax Amount
        example: 10
        type: number
      promo_id:
        description: Promo ID
        format: uuid
        type: string
      promo_name:
        description: Promo Amount
        example: Weekend Special
        type: string
      promo_type:
        description: Promo Amount
        enum:
        - fixed
        - percentage
        example: percentage
        type: string
      recur_interval:
        type: integer
      recur_repeat_on:
        enum:
        - Day
        - Week
        - Month
        - Year
        example: Day
        type: string
      recur_repetition:
        type: integer
      recur_stopped_on:
        format: date-time
        type: string
      references_no:
        description: References No
        example: "11"
        type: string
      status_transaction:
        description: Status Transaction
        enum:
        - draft
        - waiting
        - paid
        - ordered
        - ready_to_shipping
        - shipping
        - arrived
        - received
        - done
        - pending
        - cancel
        - refuse
        - expired
        example: waiting
        type: string
      tax_amount:
        description: Tax Amount
        example: 10
        type: number
      tax_id:
        description: Tax ID
        format: uuid
        type: string
      tax_name:
        description: Tax Amount
        example: PPN 10%
        type: string
      total_pay:
        description: Total Price
        example: 50000
        type: number
      total_price:
        description: Total Price
        example: 50000
        type: number
      total_price_before:
        description: Total Price Before
        example: 1000
        type: number
      transaction_category_id:
        description: Business Location ID
        format: uuid
        type: string
      transaction_date:
        description: Transaction Date
        format: date-time
        type: string
      type:
        description: Type
        enum:
        - opening_stock
        - purchase
        - sell
        - income
        - expense
        - subscription
        example: sell
        type: string
    required:
    - payment_status
    - status_transaction
    - type
    type: object
  model.TransactionIncomeAPI:
    properties:
      payment:
        $ref: '#/definitions/model.PaymentTransactionAPI'
      transaction:
        $ref: '#/definitions/model.TransactionAPI'
    type: object
  model.TransactionIncomeResponse:
    properties:
      payment:
        $ref: '#/definitions/model.PaymentTransaction'
      transaction:
        $ref: '#/definitions/model.Transaction'
    type: object
  model.TransactionPurchaseLine:
    properties:
      additional:
        type: string
      product_id:
        description: ProductID ID
        format: uuid
        type: string
      product_name:
        description: Product Name
        example: Samsung
        type: string
      promo_amount:
        description: Tax Amount
        example: 10
        type: number
      promo_name:
        description: Promo Name
        example: Promo akhir bulan
        type: string
      promo_type:
        description: 'Promo Type (e.g : ''fixed'', ''percentage'')'
        example: fixed
        type: string
      qty:
        description: Qty
        type: integer
      stock_id:
        format: uuid
        type: string
      sub_unit_price:
        type: number
      tax_amount:
        description: Tax Amount
        example: 10
        type: number
      tax_name:
        description: Tax Name
        example: Ppn 10%
        type: string
      transaction_id:
        description: Transaction ID
        format: uuid
        type: string
      type:
        description: 'Type (e.g : ''custom'',''single'',''variation'')'
        type: string
      unit_price:
        description: Unit Price
        example: 5000
        type: number
      unit_price_before:
        description: Unit Price Before
        example: 5000
        type: number
    type: object
  model.TransactionPurchaseLineAPI:
    properties:
      product_id:
        description: ProductID ID
        format: uuid
        type: string
      product_name:
        description: Product Name
        example: Samsung
        type: string
      promo_amount:
        description: Tax Amount
        example: 10
        type: number
      promo_name:
        description: Promo Name
        example: Promo akhir bulan
        type: string
      promo_type:
        description: 'Promo Type (e.g : ''fixed'', ''percentage'')'
        example: fixed
        type: string
      qty:
        description: Qty
        type: integer
      stock_id:
        format: uuid
        type: string
      sub_unit_price:
        type: number
      tax_amount:
        description: Tax Amount
        example: 10
        type: number
      tax_name:
        description: Tax Name
        example: Ppn 10%
        type: string
      transaction_id:
        description: Transaction ID
        format: uuid
        type: string
      type:
        description: 'Type (e.g : ''custom'',''single'',''variation'')'
        type: string
      unit_price:
        description: Unit Price
        example: 5000
        type: number
      unit_price_before:
        description: Unit Price Before
        example: 5000
        type: number
    type: object
  model.TransactionPurchaseLinePayload:
    properties:
      created_at:
        format: date-time
        type: string
      detail:
        items:
          $ref: '#/definitions/model.TransactionPurchaseLineAPI'
        type: array
      payment:
        $ref: '#/definitions/model.PaymentTransactionAPI'
      transaction:
        $ref: '#/definitions/model.TransactionAPI'
    type: object
  model.TransactionPurchaseLineResponse:
    properties:
      detail:
        items:
          $ref: '#/definitions/model.TransactionPurchaseLine'
        type: array
      payment:
        $ref: '#/definitions/model.PaymentTransaction'
      transaction:
        $ref: '#/definitions/model.Transaction'
    type: object
  model.TransactionSellLine:
    properties:
      additional:
        type: string
      product_id:
        description: ProductID ID
        format: uuid
        type: string
      product_name:
        description: Product Name
        example: Samsung
        type: string
      promo_amount:
        example: 10
        type: number
      promo_name:
        description: PromoID         *uuid.UUID `json:"promo_id,omitempty" swaggertype:"string"
          format:"uuid"` // Promo ID
        example: "10"
        type: string
      promo_type:
        description: Promo Amount
        example: "10"
        type: string
      qty:
        description: Qty
        type: integer
      stock_id:
        format: uuid
        type: string
      tax_amount:
        type: number
      tax_id:
        format: uuid
        type: string
      tax_name:
        type: string
      transaction_id:
        description: Transaction ID
        format: uuid
        type: string
      unit_price:
        type: number
      unit_price_before:
        type: number
    type: object
  model.TransactionSellLineAPI:
    properties:
      product_id:
        description: ProductID ID
        format: uuid
        type: string
      product_name:
        description: Product Name
        example: Samsung
        type: string
      promo_amount:
        example: 10
        type: number
      promo_name:
        description: PromoID         *uuid.UUID `json:"promo_id,omitempty" swaggertype:"string"
          format:"uuid"` // Promo ID
        example: "10"
        type: string
      promo_type:
        description: Promo Amount
        example: "10"
        type: string
      qty:
        description: Qty
        type: integer
      stock_id:
        format: uuid
        type: string
      tax_amount:
        type: number
      tax_id:
        format: uuid
        type: string
      tax_name:
        type: string
      transaction_id:
        description: Transaction ID
        format: uuid
        type: string
      unit_price:
        type: number
      unit_price_before:
        type: number
    type: object
  model.TransactionSellLinePayload:
    properties:
      detail:
        items:
          $ref: '#/definitions/model.TransactionSellLineAPI'
        type: array
      payment:
        $ref: '#/definitions/model.PaymentTransactionAPI'
      transaction:
        $ref: '#/definitions/model.TransactionAPI'
    type: object
  model.TransactionSellLineResponse:
    properties:
      detail:
        items:
          $ref: '#/definitions/model.TransactionSellLine'
        type: array
      payment_status:
        type: string
      transaction:
        $ref: '#/definitions/model.Transaction'
    type: object
  model.TransactionUpdate:
    properties:
      payment:
        $ref: '#/definitions/model.PaymentTransactionAPI'
      purchase:
        items:
          $ref: '#/definitions/model.TransactionPurchaseLine'
        type: array
      sell:
        items:
          $ref: '#/definitions/model.TransactionSellLine'
        type: array
      transaction:
        $ref: '#/definitions/model.TransactionAPI'
    type: object
host: kasirdev.monstercode.net
info:
  contact:
    email: developer@mail.com
    name: Developer
  description: API Documentation
  termsOfService: https://dospecs.monstercode.net/en/guide/tnc.html
  title: Transaction Services
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - application/json
      description: show basic response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show basic response
      tags:
      - API
  /info.json:
    get:
      consumes:
      - application/json
      description: show info response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show info response
      tags:
      - API
  /transactions:
    get:
      consumes:
      - application/json
      description: List of Transaction
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Transaction
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Transaction'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Transaction
      tags:
      - Transaction
  /transactions/{id}:
    get:
      consumes:
      - application/json
      description: Get a Transaction by id
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Transaction by id
      tags:
      - Transaction
  /transactions/{id}/payment:
    get:
      consumes:
      - application/json
      description: Get a Transaction Payemnt by transaction id
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Transaction Payemnt by transaction id
      tags:
      - TransactionPayment
    post:
      consumes:
      - application/json
      description: Create new Transaction Sell Line
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Transaction data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PaymentTransactionAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.PaymentTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Transaction Sell Line
      tags:
      - TransactionPayment
  /transactions/{id}/payment/{payment_id}:
    get:
      consumes:
      - application/json
      description: Get a  single Transaction Payment by id
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment ID
        in: path
        name: payment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction Payment data
          schema:
            $ref: '#/definitions/model.PaymentTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a  single Transaction Payment by id
      tags:
      - TransactionPayment
  /transactions/{id}/status/{status}:
    post:
      consumes:
      - application/json
      description: Update Transaction Status by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Status Transaction
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Transaction Status by ID
      tags:
      - Transaction
  /transactions/{id}/update:
    put:
      consumes:
      - application/json
      description: Update Transaction Draft
      parameters:
      - description: Transaction data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.TransactionUpdate'
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Transaction Draft
      tags:
      - Transaction
  /transactions/expense:
    post:
      consumes:
      - application/json
      description: Create new Transaction Expense
      parameters:
      - description: Transaction data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.TransactionIncomeAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.TransactionIncomeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Transaction Expense
      tags:
      - Transaction
  /transactions/income:
    post:
      consumes:
      - application/json
      description: Create new Transaction Income
      parameters:
      - description: Transaction data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.TransactionIncomeAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.TransactionIncomeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Transaction Income
      tags:
      - Transaction
  /transactions/purchase-line:
    post:
      consumes:
      - application/json
      description: Create new Transaction Purchase Line
      parameters:
      - description: Transaction data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.TransactionPurchaseLinePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.TransactionPurchaseLineResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Transaction Purchase Line
      tags:
      - Transaction
  /transactions/sell-line:
    post:
      consumes:
      - application/json
      description: Create new Transaction Sell Line
      parameters:
      - description: Transaction data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.TransactionSellLinePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.TransactionSellLineResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Transaction Sell Line
      tags:
      - Transaction
schemes:
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  TokenKey:
    in: header
    name: x-Token
    type: apiKey
swagger: "2.0"
